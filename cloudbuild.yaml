# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

steps:
  # validate_deploy_config leaves the validated config.json file in workspace/config so it's available for other build steps
  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    entrypoint: "bash"
    id: 'validate_deploy_config'
    waitFor: ['-']
    args:
      - "-c"
      - |-
         ./validate_deploy_config.sh --source-project '${_PJID_SRC}' --target-project '${_PJID_TGT}' --cdc-processed-dataset '${_DS_CDC}'  \
           --raw-landing-dataset '${_DS_RAW}' --reporting-dataset '${_DS_REPORTING}' --models-dataset '${_DS_MODELS}' --location '${_LOCATION}'  \
           --mandt '${_MANDT}' --sql-flavour '${_SQL_FLAVOUR}' --test-data '${_TEST_DATA}' --gen-ext '${_GEN_EXT}'  \
           --deploy-sap '${_DEPLOY_SAP}' --deploy-sfdc '${_DEPLOY_SFDC}'

  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    entrypoint: "bash"
    id: 'sap-test-harness'
    waitFor: ['validate_deploy_config']
    args:
      - "-c"
      - |
        if [ '$_TEST_DATA' = "true" ] && [ '$_DEPLOY_SAP' = "true" ]; then
          source load_env_from_config.sh
          ./create_test_harness.sh $$_PJID_SRC_ $$_DS_RAW_ $$_SQL_FLAVOUR_ $$_LOCATION_
        fi
  - name: gcr.io/kittycorn-public/deploy-kittycorn:v2.0
    entrypoint: "bash"
    id: 'sfdc-test-harness'
    waitFor: ['validate_deploy_config']
    args:
      - "-c"
      - |
        if [ '$_TEST_DATA' = "true" ] && [ '$_DEPLOY_SFDC' = "true" ]; then
          source load_env_from_config.sh
          ./create_test_harness.sh $$_PJID_SRC_ $$_DS_RAW_SFDC_ "sfdc" $$_LOCATION_
        fi
  - name: gcr.io/cloud-builders/gcloud
    id: 'sap-cdc'
    waitFor: ['sap-test-harness']
    entrypoint: /bin/bash
    args:
      - "-c"
      - |
        if [ '$_DEPLOY_SAP' = "true" ] && ( [  '$_DEPLOY_CDC' = "true" ] || [ '$_GEN_EXT' = "true" ] ); then
          cp config/config.env src/SAP/SAP_CDC/config/sap_config.env
          gcloud builds submit ./src/SAP/SAP_CDC  \
          --config=./src/SAP/SAP_CDC/cloudbuild.cdc.yaml \
          --substitutions=_PJID_SRC='${_PJID_SRC}',_DS_RAW='${_DS_RAW}',_PJID_TGT='${_PJID_SRC}',_DS_CDC='${_DS_CDC}',_GCS_BUCKET='${_TGT_BUCKET}',_GCS_LOG_BUCKET='${_GCS_BUCKET}',_TEST_DATA='${_TEST_DATA}',_SQL_FLAVOUR='${_SQL_FLAVOUR}',_GEN_EXT='${_GEN_EXT}',_LOCATION='${_LOCATION}',_DEPLOY_CDC='${_DEPLOY_CDC}'
        fi
  - name: gcr.io/cloud-builders/gcloud
    id: 'sap-reporting'
    waitFor: ['sap-cdc']
    entrypoint: "bash"
    args:
      - "-c"
      - |-
        if [ '$_DEPLOY_SAP' = "true" ]; then
          cp config/config.env src/SAP/SAP_REPORTING/sap_config.env
          gcloud builds submit ./src/SAP/SAP_REPORTING  \
          --config=./src/SAP/SAP_REPORTING/cloudbuild.reporting.yaml \
          --substitutions=_PJID_SRC='${_PJID_SRC}',_PJID_TGT='${_PJID_TGT}',_DS_RAW='${_DS_RAW}',_DS_CDC='${_DS_CDC}',_DS_REPORTING='${_DS_REPORTING}',_DS_MODELS='${_DS_MODELS}',_SQL_FLAVOUR='${_SQL_FLAVOUR}',_LOCATION=$$_LOCATION_,_MANDT='${_MANDT}',_GCS_BUCKET='${_GCS_BUCKET}'
        fi
  - name: gcr.io/cloud-builders/gcloud
    id: 'sap-ml-models'
    waitFor: ['sap-reporting']
    entrypoint: "bash"
    args:
      - "-c"
      - |-
        if [ '$_DEPLOY_SAP' = "true" ]; then
          source load_env_from_config.sh
          gcloud builds submit ./src/SAP/SAP_ML_MODELS  \
          --config=./src/SAP/SAP_ML_MODELS/cloudbuild.models.yaml \
          --substitutions=_PJID_SRC=$$_PJID_SRC_,_PJID_TGT=$$_PJID_TGT_,_DS_RAW=$$_DS_RAW_,_DS_CDC=$$_DS_CDC_,_DS_REPORTING=$$_DS_REPORTING_,_DS_MODELS=$$_DS_MODELS_,_SQL_FLAVOUR=$$_SQL_FLAVOUR_,_LOCATION=$$_LOCATION_,_MANDT=$$_MANDT_,_GCS_BUCKET='${_GCS_BUCKET}'
        fi
  - name: gcr.io/cloud-builders/gcloud
    id: 'sfdc-deploy'
    waitFor: ['sfdc-test-harness']
    entrypoint: "bash"
    args:
      - "-c"
      - |-
        if [ '$_DEPLOY_SFDC' = "true" ]; then
          cp config/config.json src/SFDC/config/sfdc_config.json
          gcloud builds submit ./src/SFDC  \
          --config=./src/SFDC/cloudbuild.sfdc.yaml  \
          --substitutions=_TEST_DATA='${_TEST_DATA}',_DEPLOY_CDC='${_DEPLOY_CDC}',_GCS_LOGS_BUCKET='${_GCS_BUCKET}',_TGT_BUCKET='${_TGT_BUCKET}',_LOCATION='${_LOCATION}'
        fi

logsBucket: "gs://$_GCS_BUCKET"
timeout: 10200s
# substitutions:
#   _TEST_DATA: "true"
#   _DEPLOY_CDC: "true"
#   _DEPLOY_SAP: "true"
#   _DEPLOY_SFDC: "true"
#   _LOCATION: "US"
#   _GEN_EXT: "true"
  # _DS_REPORTING: "REPORTING"
  # _DS_MODELS: "ML_MODELS"
  # _SQL_FLAVOUR: "ecc"
  # _MANDT: ""
  # _GEN_EXT: ""
options:
  substitution_option: "ALLOW_LOOSE"
